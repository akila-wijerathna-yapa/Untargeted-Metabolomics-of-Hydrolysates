Met_Category_clean <- Met_Category_clean %>%
mutate(Metabolite = case_when(
Metabolite == "Inosine-5'-monophosphate" ~ "Inosine-5-monophosphate",
Metabolite == "2'-Deoxyadenosine 5'-monophosphate" ~ "2'-Deoxyadenosine-5'-monophosphate",
Metabolite == "Riboflavin" ~ "(-)-Riboflavin",
Metabolite == "Pantothenic acid" ~ "D-(+)-Pantothenic acid",
TRUE ~ Metabolite
))
# Step 3: Left join using exact scientific names in df_avg
df_avg <- df_avg %>%
left_join(Met_Category_clean, by = c("Metabolite.name" = "Metabolite"))
# See unmatched metabolites (still with NA category)
df_avg %>%
filter(is.na(Category)) %>%
select(Metabolite.name) %>%
distinct()
df_combined <- read.csv("Data/df_combined_POS_NEG.csv")
Met_Category <- read.csv("Data/HMDB_metabolites.csv")
# Remove the 'X' column
df_combined <- df_combined %>% select(-X)
str(df_combined)
colnames(df_combined)
str(Met_Category)
colnames(Met_Category)
# Clean 'Metabolite.name' by removing everything after the first semicolon
df_combined <- df_combined %>%
mutate(Metabolite.name = str_trim(str_remove(Metabolite.name, ";.*")))
# Perform the left join with Met_Category
df_combined_v1 <- df_combined %>%
left_join(Met_Category, by = c("Metabolite.name" = "Metabolite"))
colnames(Met_Category)
colnames(df_combined_v1)
View(df_combined_v1)
df_combined <- read.csv("Data/df_combined_POS_NEG.csv")
Met_Category <- read.csv("Data/HMDB_metabolites.csv")
# Remove the 'X' column
df_combined <- df_combined %>% select(-X)
str(df_combined)
colnames(df_combined)
str(Met_Category)
colnames(Met_Category)
# Clean 'Metabolite.name' by removing extra text after the first semicolon
df_combined <- df_combined %>%
mutate(Metabolite.name = str_trim(str_remove(Metabolite.name, ";.*")))
# Harmonize metabolite names (before grouping)
df_combined <- df_combined %>%
mutate(Metabolite.name = case_when(
Metabolite.name == "Inosine-5-monophosphate" ~ "Inosine-5'-monophosphate",
Metabolite.name == "2'-Deoxyadenosine-5'-monophosphate" ~ "2'-Deoxyadenosine 5'-monophosphate",
Metabolite.name == "(-)-Riboflavin" ~ "Riboflavin",
Metabolite.name == "D-(+)-Pantothenic acid" ~ "Pantothenic acid",
TRUE ~ Metabolite.name
))
# Remove unwanted columns
df_filtered <- df_combined %>%
select(-Adduct.type, -Average.Rt.min.)
# Average all numeric columns by Metabolite.name
df_avg <- df_filtered %>%
group_by(Metabolite.name) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE), .groups = "drop")
# Join averaged data with metabolite categories
df_avg <- df_avg %>%
left_join(Met_Category, by = c("Metabolite.name" = "Metabolite"))
View(df_avg)
unmatched_names <- df_avg %>%
filter(is.na(Category)) %>%
distinct(Metabolite.name) %>%
pull(Metabolite.name)
unmatched_names
# Try fuzzy match: search each unmatched name in Met_Category using grep
for (name in unmatched_names) {
match <- grep(name, Met_Category$Metabolite, ignore.case = TRUE, value = TRUE)
if (length(match) > 0) {
cat("\n", name, "\n→", match, "\n")
}
}
no_match <- unmatched_names[!sapply(unmatched_names, function(name) {
any(grepl(name, Met_Category$Metabolite, ignore.case = TRUE, fixed = TRUE))
})]
no_match
for (name in unmatched_names) {
match <- grep(name, Met_Category$Metabolite, ignore.case = TRUE, value = TRUE, fixed = TRUE)
if (length(match) > 0) {
cat("\n", name, "\n→", match, "\n")
}
}
grep()
unmatched_names <- df_avg %>%
filter(is.na(Category)) %>%
distinct(Metabolite.name) %>%
pull(Metabolite.name)
unmatched_names
problem_name <- "(1S,8R,9R)-8-Hydroxy-4-(Propan-2-Ylidene)-10-Oxatricyclo[7.2.1.01,5]Dodecane-8-Carboxylic Acid"
which(problem_name == Met_Category$Metabolite)  # should return an index if exact match
mc_name <- Met_Category$Metabolite[which.min(adist(problem_name, Met_Category$Metabolite))]
utf8ToInt(problem_name)
utf8ToInt(mc_name)
df_avg <- df_avg %>%
mutate(join_key = tolower(str_trim(Metabolite.name)))
Met_Category <- Met_Category %>%
mutate(join_key = tolower(str_trim(Metabolite)))
# Now join on the join_key
df_avg <- df_avg %>%
left_join(Met_Category %>% select(join_key, Category), by = "join_key") %>%
select(-join_key)  # drop helper column
df_avg %>%
filter(Metabolite.name == problem_name)
join_with_category <- function(df_avg, met_category_df,
avg_col = "Metabolite.name", cat_col = "Metabolite") {
df_avg <- df_avg %>%
mutate(join_key = tolower(str_trim(!!sym(avg_col))))  # create join key from metabolite name
met_category_df <- met_category_df %>%
mutate(join_key = tolower(str_trim(!!sym(cat_col))))  # create join key from reference table
df_joined <- df_avg %>%
left_join(met_category_df %>% select(join_key, Category), by = "join_key") %>%
select(-join_key)
return(df_joined)
}
df_avg <- join_with_category(df_avg, Met_Category)
df_avg %>%
filter(is.na(Category)) %>%
distinct(Metabolite.name)
df_combined <- read.csv("Data/df_combined_POS_NEG.csv")
Met_Category <- read.csv("Data/HMDB_metabolites.csv")
# Remove the 'X' column
df_combined <- df_combined %>% select(-X)
str(df_combined)
colnames(df_combined)
str(Met_Category)
colnames(Met_Category)
# Clean 'Metabolite.name' by removing extra text after the first semicolon
df_combined <- df_combined %>%
mutate(Metabolite.name = str_trim(str_remove(Metabolite.name, ";.*")))
# Harmonize metabolite names (before grouping)
df_combined <- df_combined %>%
mutate(Metabolite.name = case_when(
Metabolite.name == "Inosine-5-monophosphate" ~ "Inosine-5'-monophosphate",
Metabolite.name == "2'-Deoxyadenosine-5'-monophosphate" ~ "2'-Deoxyadenosine 5'-monophosphate",
Metabolite.name == "(-)-Riboflavin" ~ "Riboflavin",
Metabolite.name == "D-(+)-Pantothenic acid" ~ "Pantothenic acid",
TRUE ~ Metabolite.name
))
# Remove unwanted columns
df_filtered <- df_combined %>%
select(-Adduct.type, -Average.Rt.min.)
# Clean 'Metabolite.name' by removing extra text after the first semicolon
df_combined <- df_combined %>%
mutate(Metabolite.name = str_trim(str_remove(Metabolite.name, ";.*")))
df_combined <- df_combined %>%
mutate(Metabolite.name = case_when(
Metabolite.name == "Inosine-5-monophosphate" ~ "Inosine-5'-monophosphate",
Metabolite.name == "2'-Deoxyadenosine-5'-monophosphate" ~ "2'-Deoxyadenosine 5'-monophosphate",
Metabolite.name == "(-)-Riboflavin" ~ "Riboflavin",
Metabolite.name == "D-(+)-Pantothenic acid" ~ "Pantothenic acid",
Metabolite.name == "2'-Deoxyadenosine-5'-Monophosphate" ~ "2'-Deoxyadenosine 5'-Monophosphate",
Metabolite.name == "Aconitic Acid (Not Validated, Isomer Of 271)" ~ "Aconitic Acid",
Metabolite.name == "Adenosine-3-Monophosphate" ~ "Adenosine 3'-Monophosphate",
Metabolite.name == "Azelaic Acid (Not Validated)" ~ "Azelaic Acid",
Metabolite.name == "Citric Acid (Not Validated, Isomer Of 227)" ~ "Citric Acid",
Metabolite.name == "Flavin??Adenine??Dinucleotide" ~ "Flavin Adenine Dinucleotide",
Metabolite.name == "Inosine-5-Monophosphate" ~ "Inosine-5'-Monophosphate",
Metabolite.name == "Isoleucine (Not Validated)" ~ "Isoleucine",
Metabolite.name == "Xanthosine (Not Validated)" ~ "Xanthosine",
TRUE ~ Metabolite.name
))
# Remove unwanted columns
df_filtered <- df_combined %>%
select(-Adduct.type, -Average.Rt.min.)
# Average all numeric columns by Metabolite.name
df_avg <- df_filtered %>%
group_by(Metabolite.name) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE), .groups = "drop")
# Join averaged data with metabolite categories
df_avg <- df_avg %>%
left_join(Met_Category, by = c("Metabolite.name" = "Metabolite"))
unmatched_names <- df_avg %>%
filter(is.na(Category)) %>%
distinct(Metabolite.name) %>%
pull(Metabolite.name)
unmatched_names
# Average all numeric columns by Metabolite.name
df_avg <- df_filtered %>%
group_by(Metabolite.name) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE), .groups = "drop")
join_with_category <- function(df_avg, met_category_df,
avg_col = "Metabolite.name", cat_col = "Metabolite") {
df_avg <- df_avg %>%
mutate(join_key = tolower(str_trim(!!sym(avg_col))))  # create join key from metabolite name
met_category_df <- met_category_df %>%
mutate(join_key = tolower(str_trim(!!sym(cat_col))))  # create join key from reference table
df_joined <- df_avg %>%
left_join(met_category_df %>% select(join_key, Category), by = "join_key") %>%
select(-join_key)
return(df_joined)
}
df_avg <- join_with_category(df_avg, Met_Category)
df_avg %>%
filter(is.na(Category)) %>%
distinct(Metabolite.name)
# Clean 'Metabolite.name' by removing extra text after the first semicolon
df_combined <- df_combined %>%
mutate(Metabolite.name = str_trim(str_remove(Metabolite.name, ";.*")))
df_combined <- df_combined %>%
mutate(Metabolite.name = case_when(
Metabolite.name == "Inosine-5-monophosphate" ~ "Inosine-5'-monophosphate",
Metabolite.name == "2'-Deoxyadenosine-5'-monophosphate" ~ "2'-Deoxyadenosine 5'-monophosphate",
Metabolite.name == "(-)-Riboflavin" ~ "Riboflavin",
Metabolite.name == "D-(+)-Pantothenic Acid" ~ "Pantothenic acid",
Metabolite.name == "2'-Deoxyadenosine-5'-Monophosphate" ~ "2'-Deoxyadenosine 5'-Monophosphate",
Metabolite.name == "Aconitic Acid (Not Validated, Isomer Of 271)" ~ "Aconitic Acid",
Metabolite.name == "Adenosine-3-Monophosphate" ~ "Adenosine 3'-Monophosphate",
Metabolite.name == "Azelaic Acid (Not Validated)" ~ "Azelaic Acid",
Metabolite.name == "Citric Acid (Not Validated, Isomer Of 227)" ~ "Citric Acid",
Metabolite.name == "Flavin??Adenine??Dinucleotide" ~ "Flavin Adenine Dinucleotide",
Metabolite.name == "Inosine-5-Monophosphate" ~ "Inosine-5'-Monophosphate",
Metabolite.name == "Isoleucine (Not Validated)" ~ "Isoleucine",
Metabolite.name == "Xanthosine (Not Validated)" ~ "Xanthosine",
TRUE ~ Metabolite.name
))
# Remove unwanted columns
df_filtered <- df_combined %>%
select(-Adduct.type, -Average.Rt.min.)
# Average all numeric columns by Metabolite.name
df_avg <- df_filtered %>%
group_by(Metabolite.name) %>%
summarise(across(where(is.numeric), mean, na.rm = TRUE), .groups = "drop")
join_with_category <- function(df_avg, met_category_df,
avg_col = "Metabolite.name", cat_col = "Metabolite") {
df_avg <- df_avg %>%
mutate(join_key = tolower(str_trim(!!sym(avg_col))))  # create join key from metabolite name
met_category_df <- met_category_df %>%
mutate(join_key = tolower(str_trim(!!sym(cat_col))))  # create join key from reference table
df_joined <- df_avg %>%
left_join(met_category_df %>% select(join_key, Category), by = "join_key") %>%
select(-join_key)
return(df_joined)
}
df_avg <- join_with_category(df_avg, Met_Category)
df_avg %>%
filter(is.na(Category)) %>%
distinct(Metabolite.name)
df_scaled_numeric <- df_avg %>%
select(-Metabolite) %>%
scale() %>%
as.data.frame()
View(df_avg)
df_scaled_numeric <- df_avg %>%
select(-Metabolite.name) %>%
scale() %>%
as.data.frame()
# Combine the scaled numeric data with metadata
df_combined_scaled <- cbind(
df_combined %>% select(Metabolite.name),
df_scaled_numeric
)
str(df_avg)
# Matrix of intensity values only
df_scaled <- df_avg %>%
select(-Metabolite.name, -Category) %>%
scale() %>%
as.data.frame()
# Add back metabolite names and category
df_scaled <- df_scaled %>%
mutate(Metabolite.name = df_avg$Metabolite.name,
Category = df_avg$Category) %>%
relocate(Metabolite.name, .before = 1)
# Convert scaled matrix to rownames = Metabolites
mat <- df_scaled %>%
column_to_rownames("Metabolite.name") %>%
select(-Category) %>%
as.matrix()
# Optional: annotation by category
annotation_row <- data.frame(Category = df_scaled$Category)
rownames(annotation_row) <- rownames(mat)
pheatmap(mat,
annotation_row = annotation_row,
show_rownames = FALSE,
cluster_rows = TRUE,
cluster_cols = TRUE,
scale = "none",
fontsize = 8)
library(ggplot2)
library(ggfortify)
install.packages("ggfortify")
library(ggfortify)
# Transpose data: samples as rows
df_pca <- df_avg %>%
select(-Metabolite.name, -Category) %>%
t() %>%
as.data.frame()
# Assign sample names
rownames(df_pca) <- colnames(df_avg)[-c(1, ncol(df_avg))]
# Perform PCA
pca_res <- prcomp(df_pca, scale. = TRUE)
# Plot PCA
autoplot(pca_res, data = NULL, label = TRUE) +
ggtitle("PCA of Metabolomics Samples") +
theme_minimal()
# Prepare data for PCA (exclude metadata)
df_avg_scaled_matrix <- df_avg %>%
select(-Metabolite.name, -Category) %>%
t() %>%
as.data.frame()
# Run PCA
pca_result <- prcomp(df_avg_scaled_matrix, center = FALSE, scale. = FALSE)
# Extract first two PCs for plotting
df_pca_plot <- as.data.frame(pca_result$x[, 1:2])
df_pca_plot$Group <- sapply(rownames(df_pca_plot), function(x) strsplit(x, "_")[[1]][1])
df_pca_plot$Sample <- rownames(df_pca_plot)
# Define colors for up to 9 groups (adjust if more)
pca_colors <- c(
"#1F77B4", "#FF7F0E", "#2CA02C", "#D62728", "#9467BD",
"#8C564B", "#E377C2", "#7F7F7F", "#BCBD22"
)
group_color_map <- setNames(pca_colors, unique(df_pca_plot$Group))
# Calculate variance explained
explained_var <- pca_result$sdev^2 / sum(pca_result$sdev^2)
pc1_var <- round(explained_var[1] * 100, 2)
pc2_var <- round(explained_var[2] * 100, 2)
# Create PCA plot
pca_plot <- ggplot(df_pca_plot, aes(x = PC1, y = PC2, color = Group, label = Sample)) +
geom_point(size = 4) +
geom_text_repel(size = 3, max.overlaps = 20, box.padding = 0.5, point.padding = 0.5) +
scale_color_manual(values = group_color_map) +
labs(
title = "PCA Plot of Scaled Metabolite Abundance",
x = paste0("Principal Component 1 (", pc1_var, "%)"),
y = paste0("Principal Component 2 (", pc2_var, "%)"),
color = "Group"
) +
theme_minimal() +
theme(
legend.position = "right",
legend.text = element_text(size = 10),
legend.title = element_text(size = 12),
plot.title = element_text(hjust = 0.5)
)
# Step 7: Display PCA plot
print(pca_plot)
# Save PCA plot as PDF and JPEG
ggsave("PCA_Plot_Scaled_Metabolites.pdf", plot = pca_plot, device = "pdf", width = 10, height = 8, dpi = 300)
ggsave("PCA_Plot_Scaled_Metabolites.jpeg", plot = pca_plot, device = "jpeg", width = 10, height = 8, dpi = 300)
library(RColorBrewer)
# Prepare the intensity matrix
# Rows = metabolites, Columns = samples
m.int <- df_avg %>%
select(-Metabolite.name, -Category) %>%
as.matrix()
# Assign rownames as metabolite names
rownames(m.int) <- df_avg$Metabolite.name
# Step 2: Create row annotation (metabolite category)
row_annotation <- data.frame(Category = df_avg$Category)
rownames(row_annotation) <- rownames(m.int)
# Define category colors
# Automatically generate colors for each unique category
unique_categories <- unique(df_avg$Category)
col_cat2 <- list(Category = setNames(brewer.pal(n = length(unique_categories), name = "Set3"), unique_categories))
# Plot the heatmap
p.heat <- pheatmap(
m.int,
scale = "row",
show_rownames = FALSE,
cluster_rows = TRUE,
cluster_cols = TRUE,
color = colorRampPalette(c("navy", "white", "#E31A1C"))(50),
annotation_row = row_annotation,
angle_col = 315,
annotation_colors = col_cat2
)
# Step 5: Save to PDF
pdf("metaboliteheat.pdf", height = 15, width = 8)
print(p.heat)
dev.off()
################################################################################
# Find Top metabolites
# Reshape df_avg to long format
df_long <- df_avg %>%
pivot_longer(cols = -c(Metabolite.name, Category),
names_to = "Sample", values_to = "Intensity")
# Extract sample group (everything before last "_")
df_long <- df_long %>%
mutate(Group = str_extract(Sample, ".*(?=_[0-9]+$)"))
View(df_long)
# Average intensity per metabolite per group
df_group_avg <- df_long %>%
group_by(Group, Metabolite.name, Category) %>%
summarise(Mean_Intensity = mean(Intensity, na.rm = TRUE), .groups = "drop")
# For each group, get top 50 metabolites
top50_metabolites <- df_group_avg %>%
group_by(Group) %>%
slice_max(order_by = Mean_Intensity, n = 50) %>%
arrange(Group, desc(Mean_Intensity)) %>%
ungroup()
# View result
print(top50_metabolites)
View(top50_metabolites)
library(ComplexUpset)
# Create binary presence matrix
upset_data <- top50_metabolites %>%
select(Group, Metabolite.name) %>%
mutate(value = 1) %>%
pivot_wider(names_from = Group, values_from = value, values_fill = 0)
# Store metabolite names separately (optional)
metabolite_names <- upset_data$Metabolite.name
# Drop the name column to retain just the presence/absence matrix
upset_matrix <- upset_data %>%
select(-Metabolite.name)
ComplexUpset::upset(
data = upset_data,
intersect = colnames(upset_matrix),
name = "Top 50 Metabolites",
base_annotations = list(
'Intersection size' = intersection_size(
text = list(vjust = -0.5, size = 3)
)
),
width_ratio = 0.2
)
# Exclude non-numeric columns
pca_data <- df_avg %>%
select(-Metabolite.name, -Category)
# Transpose to get samples as rows
pca_matrix <- t(pca_data)
# Assign proper sample names
rownames(pca_matrix) <- colnames(df_avg)[-c(1, ncol(df_avg))]
# Run PCA
pca_res <- prcomp(pca_matrix, scale. = TRUE)
# Variance explained
var_exp <- pca_res$sdev^2 / sum(pca_res$sdev^2)
pc1_var <- round(var_exp[1] * 100, 2)
pc2_var <- round(var_exp[2] * 100, 2)
# Extract PC1 and PC2
pca_scores <- as.data.frame(pca_res$x[, 1:2])
pca_scores$Sample <- rownames(pca_scores)
pca_scores$Group <- sapply(pca_scores$Sample, function(x) strsplit(x, "_")[[1]][1])
# Plot
pca_score_plot <- ggplot(pca_scores, aes(x = PC1, y = PC2, color = Group, label = Sample)) +
geom_point(size = 4) +
geom_text_repel(size = 3, max.overlaps = 20) +
labs(
title = "PCA Score Plot (Samples)",
x = paste0("PC1 (", pc1_var, "%)"),
y = paste0("PC2 (", pc2_var, "%)")
) +
theme_minimal()
print(pca_score_plot)
# Loadings: how each metabolite contributes to PC1 and PC2
loadings <- as.data.frame(pca_res$rotation[, 1:2])
loadings$Metabolite <- rownames(loadings)
# Optional: annotate metabolite category
loadings <- left_join(loadings, df_avg %>% select(Metabolite.name, Category), by = c("Metabolite" = "Metabolite.name"))
# Plot
loading_plot <- ggplot(loadings, aes(x = PC1, y = PC2, label = Metabolite)) +
geom_point(aes(color = Category), alpha = 0.7) +
geom_text_repel(size = 3, max.overlaps = 20) +
labs(
title = "PCA Loading Plot (Metabolites)",
x = paste0("PC1 (", pc1_var, "%)"),
y = paste0("PC2 (", pc2_var, "%)")
) +
theme_minimal()
print(loading_plot)
# Extract PCA loadings (i.e., variable contributions)
# Each row is a metabolite; columns = PCs
loadings <- as.data.frame(pca_result$rotation[, 1:2])
loadings$Metabolite.name <- df_avg$Metabolite.name
loadings$Category <- df_avg$Category
# Scale variance explained
pc1_var <- round((pca_result$sdev[1]^2 / sum(pca_result$sdev^2)) * 100, 2)
pc2_var <- round((pca_result$sdev[2]^2 / sum(pca_result$sdev^2)) * 100, 2)
# Create PCA loading plot
loading_plot <- ggplot(loadings, aes(x = PC1, y = PC2, label = Metabolite.name, color = Category)) +
geom_point(alpha = 0.8, size = 3) +
geom_text_repel(size = 3, max.overlaps = 20, box.padding = 0.4, point.padding = 0.3) +
labs(
title = "PCA Loading Plot of Metabolites",
x = paste0("PC1 Loadings (", pc1_var, "%)"),
y = paste0("PC2 Loadings (", pc2_var, "%)")
) +
scale_color_brewer(palette = "Set3") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
legend.title = element_text(size = 10),
legend.text = element_text(size = 9)
)
# Display plot
print(loading_plot)
# Step 1: Extract PCA loadings
loadings <- as.data.frame(pca_result$rotation[, 1:2])
loadings$Metabolite.name <- df_avg$Metabolite.name
loadings$Category <- df_avg$Category
# Step 2: Variance explained
pc1_var <- round((pca_result$sdev[1]^2 / sum(pca_result$sdev^2)) * 100, 2)
pc2_var <- round((pca_result$sdev[2]^2 / sum(pca_result$sdev^2)) * 100, 2)
# Step 3: Plot
loading_plot <- ggplot(loadings, aes(x = PC1, y = PC2, color = Category)) +
geom_point(alpha = 0.85, size = 3) +
labs(
title = "PCA Loading Plot by Metabolite Category",
x = paste0("PC1 Loadings (", pc1_var, "%)"),
y = paste0("PC2 Loadings (", pc2_var, "%)")
) +
scale_color_brewer(palette = "Set3") +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
legend.title = element_text(size = 10),
legend.text = element_text(size = 9)
)
# Display
print(loading_plot)
